// Code generated by Octo (https://github.com/oesand/octo). DO NOT EDIT!
//go:build !octogen
// +build !octogen

package foo

import (
	"github.com/oesand/octo"
	als1 "github.com/oesand/octo/testdata/octogen_tests/NestedAnyVariants/foo/nested"
	als2 "github.com/oesand/octo/testdata/octogen_tests/NestedAnyVariants/foo/nested/inner"
)

func IncludeAny(container *octo.Container) {
    octo.Inject(container, func(container *octo.Container) *als2.Struct {
        return &als2.Struct{
        }
    })
    octo.InjectNamed(container, "key1", func(container *octo.Container) *als2.Named {
        return &als2.Named{
            Inf:octo.Resolve[als2.Inf](container),
            SlInf:octo.ResolveAll[als2.Inf](container),
        }
    })
    octo.Inject(container, func(container *octo.Container) *als1.Other {
        return &als1.Other{
            Nm:octo.ResolveNamed[*als2.Named](container, "key1"),
            Inf:octo.Resolve[als2.Inf](container),
            SlInf:octo.ResolveAll[als2.Inf](container),
        }
    })
    octo.Inject(container, func(container *octo.Container) *als1.NewestStruct {
        return &als1.NewestStruct{
        }
    })
    octo.Inject(container, func(container *octo.Container) *als1.NewestStruct {
        return als1.NewStruct(
            octo.Resolve[als2.Inf](container),
            octo.ResolveAll[als2.Inf](container),
            octo.Resolve[*als1.Other](container),
            octo.Resolve[als2.Struct](container),
            octo.Resolve[*als2.Named](container),
        )
    })
    octo.Inject(container, func(container *octo.Container) als1.NewestStruct {
        return als1.NewStct(
            octo.Resolve[als2.Inf](container),
            octo.ResolveAll[als2.Inf](container),
            octo.Resolve[als1.Other](container),
            octo.Resolve[*als2.Struct](container),
            octo.Resolve[als2.Named](container),
        )
    })
}
