name: Auto Release 🚀

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  check_admin:
    runs-on: ubuntu-latest
    steps:
      - name: 🔐 Check if triggered by admin
        id: check_admin
        run: |
          permission=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" \
            | jq -r .permission)
          if [ "$permission" = "admin" ]; then
            echo "is_admin=true" >> $GITHUB_OUTPUT
          else
            echo "is_admin=false" >> $GITHUB_OUTPUT
          fi

      - name: ✅ Run if admin
        if: steps.check_admin.outputs.is_admin == 'true'
        run: echo "Workflow triggered by an admin - ${{ github.actor }}"

      - name: ❌ Fail if not admin
        if: steps.check_admin.outputs.is_admin != 'true'
        run: |
          echo "Error: This workflow can only be triggered by organization admins"
          exit 1

  release:
    needs: check_admin
    if: needs.check_admin.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📦 Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.24.5

      - name: 🛠️ Tests
        run: make test

      - name: 🧹 Cleanup xxx_test.go files
        run: find . -name "*_test.go" -delete

      - name: 🧹 Cleanup octogen tests
        run: rm -rf ./testdata

      - name: 🧹 Cleanup dependencies
        run: go mod tidy

      - name: 📌 List files
        run: tree -Cfi
      - name: 📌 Write new go.mod into logs
        run: cat go.mod
      - name: 📌 Write new go.sum into logs
        run: cat go.sum

      - name: 📦 Build binaries
        run: |
          mkdir -p bin
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "windows/amd64"
            "windows/arm64"
            "darwin/amd64"
            "darwin/arm64"
          )

          for platform in "${platforms[@]}"; do
            IFS="/" read -r GOOS GOARCH <<<"$platform"
            output="bin/octogen-${GOOS}-${GOARCH}"
            if [ "$GOOS" = "windows" ]; then
              output="${output}.exe"
            fi

            echo "🛠 Building for ${GOOS}/${GOARCH}..."
            GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build -o "$output" ./cmd/octogen
          done

          echo "✅ Build complete:"
          ls -lh bin/

      - name: 🚀 Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Remove leading 'v' if present (e.g., v1.2.3 -> 1.2.3)
          VERSION="${GITHUB_REF_NAME#v}"
      
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
      
          echo "Detected version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
      
          FLAGS="--title \"$TAG\" --generate-notes"
          
          if [ "$PATCH" = "0" ]; then
            echo "🟢 Detected minor release ($MAJOR.$MINOR.0) — creating release"
          else
            echo "🟡 Detected patch release ($MAJOR.$MINOR.$PATCH) — creating prerelease"
            FLAGS="$FLAGS --prerelease"
          fi
          
          gh release create "${{ github.ref_name }}" $FLAGS bin/*
